# Check if code checked into external resources (blogs, tutorials)
# that we also track in our CI is affected by a PR.
# In that case, we add a label to the PR (`external-code-affected`) and
# add a comment to make sure that the external code still works and is
# eventually updated.
name: External code check

on: pull_request_target

jobs:
  check-changes:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0
      
    - name: Check for changes in tracked files
      id: checkfile
      run: |
        set -xe
        declare -A FILES_TO_EXTERNAL_URI
        FILES_TO_EXTERNAL_URI=(
          # This is a mapping from [source_code_file] --> [external URI]
          # When `source_code_file` is changed, the `external URI` should be reviewed.
          ["src/tracked_file.py"]="https://github.com/ray-project/ray/somewhere"
          ["src/second_tracked_file.py"]="https://github.com/ray-project/ray/else"
          # Add more fils below.
        )
        
        CHANGED_FILES_URIS=""
        GIT_DIFF=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
        
        echo "All changed files:"
        echo -e $GIT_DIFF
        
        for file in "${!FILES_TO_EXTERNAL_URI[@]}"; do
          uri="${FILES_TO_EXTERNAL_URI[$file]}"
          if echo "$GIT_DIFF" | grep -q "^$file$"; then
            CHANGED_FILES_URIS+="$file||$uri++"
          fi
        done

        if [ -z "CHANGED_FILES_URIS" ]; then
          echo "No changes in tracked files detected."
        else
          echo "Changes detected in the following tracked files:"
          echo -e $CHANGED_FILES_URIS
          echo "CHANGED_FILES_URIS=$(echo -e "$CHANGED_FILES_URIS")" >> $GITHUB_ENV
        fi

    - name: Add label and comment if a tracked file changed
      uses: actions/github-script@v5
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          // Check if there are no changed files
          if (!process.env.CHANGED_FILES_URIS || process.env.CHANGED_FILES_URIS.trim() === '') {
            console.log("No changes in tracked files detected.")
            return
          }
          
          // Rebuild map from changed files --> external URIs
          const changedURIs = process.env.CHANGED_FILES_URIS.trim().split('++').filter(item => item !== '').reduce((acc, item) => {
            const [file, ...uriParts] = item.split('||');
            const uri = uriParts.join('||'); // rejoin in case URI contained ||
            acc[file] = uri;
            return acc;
          }, {});
          
          console.log(process.env.CHANGED_FILES_URIS);
          console.log(changedURIs);

          // Get existing comments
          const existingComments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          let commentToUpdate = existingComments.data.find(comment => 
            comment.user.login === 'github-actions[bot]' && comment.body.startsWith("## Attention: External code changed")
          );

          var newChange = false;

          var commentBody = `## Attention: External code changed

          This PR changes code or examples that are used or cited in external sources,
          e.g. blog posts.

          Before merging this PR, please make sure that the code in the external
          sources is still working, and consider updating them to reflect the changes.

          The affected files and the external sources are:
          `;

          // For each changed file, create a comment if it has not been commented before
          for (let file in changedURIs) {
            const fileMessage = `- \`${file}\`: ${changedURIs[file]}`;
            if (!commentToUpdate || !commentToUpdate.body.includes(fileMessage)) {
              newChange = true;
            }
            commentBody += `\n${fileMessage}`;
          }

          if (newChange) {
            if (commentToUpdate) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: commentToUpdate.id,
                body: commentBody
              });          
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['external-code-affected']
            });
          }
